# Ken Eguro
//		Alpha version - 2/11/09
//		Version 1.0 - 1/4/10
//		Version 1.0.1 - 5/7/10
//		Version 1.1 - 8/1/11

CONFIG PART = 5vlx110tff1136-1;
 
# ************ IO pin mappings
# System clock
Net CLK_100  LOC = AH15 | IOSTANDARD = LVCMOS33;

INST "RESET"	LOC = "E9" | IOSTANDARD = LVDCI_33;  #CPU reset button - active low

# GMII pins for EMAC0
INST "GMII_TXD_0<?>"		IOSTANDARD = LVDCI_33;
INST "GMII_TXD_0<7>"		LOC = "AG11";
INST "GMII_TXD_0<6>"		LOC = "AG10";
INST "GMII_TXD_0<5>"		LOC = "AH8";
INST "GMII_TXD_0<4>"		LOC = "AG8";
INST "GMII_TXD_0<3>"		LOC = "AH10";
INST "GMII_TXD_0<2>"		LOC = "AH9";
INST "GMII_TXD_0<1>"		LOC = "AE11";
INST "GMII_TXD_0<0>"		LOC = "AF11";
INST "GMII_TX_EN_0"		LOC = "AJ10" | IOSTANDARD = LVDCI_33;
INST "GMII_TX_ER_0"		LOC = "AJ9" | IOSTANDARD = LVDCI_33;
INST "GMII_GTX_CLK_0"	LOC = "J16" | IOSTANDARD = LVCMOS25;
INST "GMII_RXD_0<?>"		IOSTANDARD = LVCMOS25;  #User selectable by J20
INST "GMII_RXD_0<7>"		LOC = "F33";
INST "GMII_RXD_0<6>"		LOC = "D34";
INST "GMII_RXD_0<5>"		LOC = "C34";
INST "GMII_RXD_0<4>"		LOC = "D32";
INST "GMII_RXD_0<3>"		LOC = "C32";
INST "GMII_RXD_0<2>"		LOC = "C33";
INST "GMII_RXD_0<1>"		LOC = "B33";
INST "GMII_RXD_0<0>"		LOC = "A33";
INST "GMII_RX_DV_0"		LOC = "E32" | IOSTANDARD = LVCMOS25; #User selectable by J20
INST "GMII_RX_ER_0"		LOC = "E33" | IOSTANDARD = LVCMOS25; #User selectable by J20
INST "GMII_RX_CLK_0"		LOC = "H17" | IOSTANDARD = LVCMOS25; 
INST "GMII_RESET_B"		LOC = "J14" | IOSTANDARD = LVCMOS25;

# System ACE pins
Net sysACE_CLK  	LOC = AH17 | IOSTANDARD = LVCMOS33;	#33 Mhz clock

INST "sysACE_MPADD<?>"		IOSTANDARD = LVDCI_33;
INST "sysACE_MPADD<0>"		LOC = "G5";
INST "sysACE_MPADD<1>"		LOC = "N7";
INST "sysACE_MPADD<2>"		LOC = "N5";
INST "sysACE_MPADD<3>"		LOC = "P5";
INST "sysACE_MPADD<4>"		LOC = "R6";
INST "sysACE_MPADD<5>"		LOC = "M6";
INST "sysACE_MPADD<6>"		LOC = "L6";

CONFIG DCI_CASCADE = "22 12";						#Required so that bank 12 can do 3.3V DCI output
INST "sysACE_MPDATA<*>"		IOSTANDARD = LVDCI_33;
INST "sysACE_MPDATA<0>"			LOC = "P9";
INST "sysACE_MPDATA<1>"			LOC = "T8";
INST "sysACE_MPDATA<2>"			LOC = "J7";
INST "sysACE_MPDATA<3>"			LOC = "H7";
INST "sysACE_MPDATA<4>"			LOC = "R7";
INST "sysACE_MPDATA<5>"			LOC = "U7";
INST "sysACE_MPDATA<6>"			LOC = "P7";
INST "sysACE_MPDATA<7>"			LOC = "P6";
INST "sysACE_MPDATA<8>"			LOC = "R8";
INST "sysACE_MPDATA<9>"			LOC = "L5";
INST "sysACE_MPDATA<10>"		LOC = "L4";
INST "sysACE_MPDATA<11>"		LOC = "K6";
INST "sysACE_MPDATA<12>"		LOC = "J5";
INST "sysACE_MPDATA<13>"		LOC = "T6";
INST "sysACE_MPDATA<14>"		LOC = "K7";
INST "sysACE_MPDATA<15>"		LOC = "J6";

INST "sysACE_MPCE"		LOC = "M5" | IOSTANDARD = LVDCI_33;
INST "sysACE_MPWE"		LOC = "R9" | IOSTANDARD = LVDCI_33;
INST "sysACE_MPOE"		LOC = "N8" | IOSTANDARD = LVDCI_33;
#INST "sysACE_MPBRDY"		LOC = "H5" | IOSTANDARD = LVDCI_33;
#INST "sysACE_MPIRQ"		LOC = "M7" | IOSTANDARD = LVDCI_33;

NET "LED<0>"	LOC = "AE24" | IOSTANDARD = LVDCI_18;	#LED 7
NET "LED<1>"	LOC = "AD24"| IOSTANDARD = LVDCI_18;		#LED 6
NET "LED<2>"	LOC = "AD25" | IOSTANDARD = LVDCI_18;	#LED 5
NET "LED<3>"	LOC = "G16" | IOSTANDARD = LVCMOS25;		#LED 4
NET "LED<4>"	LOC = "AD26" | IOSTANDARD = LVDCI_18;	#LED 3
NET "LED<5>"	LOC = "G15" | IOSTANDARD = LVCMOS25;		#LED 2
NET "LED<6>"	LOC = "L18" | IOSTANDARD = LVCMOS25;		#LED 1
NET "LED<7>"	LOC = "H18" | IOSTANDARD = LVCMOS25;		#LED 0

# ************ Timing constraints
# 125 MHz ethernet clock - 100 ps extra leeway
NET "clk_125_eth" TNM_NET =  "clk_125_eth";
TIMESPEC "TS_CLK_125" = PERIOD "clk_125_eth" 7900 ps HIGH 50%;

# 200 MHz reference clock - 100 ps extra leeway
NET "clk_200" TNM_NET =  "clk_200";
TIMESPEC "TS_CLK_200" = PERIOD "clk_200" 4900 ps HIGH 50%;

# ************USER CLOCK
# 167 MHz clock for user interface - 100 ps extra leeway
NET "clk_user_interface" TNM_NET =  "clk_user_interface";
TIMESPEC "TS_CLK_USER_INTERFACE" = PERIOD "clk_user_interface" 5888 ps HIGH 50%;

# 33 MHz SystemACE clock - 100 ps extra
NET "*sysACE_clk_o" TNM_NET =  "sysACE_clk_o";
TIMESPEC "TS_sysACE_clk_o" = PERIOD "sysACE_clk_o" 30.200 ns HIGH 50%;

# 30.3 (period) + 5.140 (phase difference) - 12(setup) = 23.44 slack
NET "sysACE_MPWE" TNM_NET =  "sysACE_MPWE";
TIMESPEC "TS_sysACE_WE" = FROM "sysACE_clk_o" TO "sysACE_MPWE" 23.44ns DATAPATHONLY; 
NET "sysACE_MPOE" TNM_NET =  "sysACE_MPOE";
TIMESPEC "TS_sysACE_OE" = FROM "sysACE_clk_o" TO "sysACE_MPOE" 23.44ns DATAPATHONLY;

# 30.3 (period) + 5.140 (phase difference) - 4(setup) = 31.44 slack, so taken care of by normal period requirements
#NET "sysACE_MPADD<*>" TNM_NET = "sysACE_MPADD";
#TIMESPEC "TS_sysACE_MPADD" = FROM "sysACE_clk_o" TO "sysACE_MPADD" 31.44ns DATAPATHONLY; 

# 30.3 - 5.140 (phase difference) - 22(clk->valid time) = 3.16 slack
NET "sysACE_MPDATA<*>" TNM_NET =  "sysACE_MPDATA";
TIMESPEC "TS_sysACE_MPDATAIN" = FROM "sysACE_MPDATA" TO "sysACE_clk_o" 3.16ns DATAPATHONLY;

#This is necessary to be able to write/read the SystemACE registers every clock cycle.
# The system operates at 33MHz, but the system 33 MHz clock is 180 deg out of phase with
# the one provided to the SystemACE chip.  To reliably write to
# the registers every clock cycle we need the WE and address lines to be valid 12/4ns before
# the SystemACE clock edge.  When we read, we can't sample the output data until at least
# 22ns after the SystemACE clock edge and the OE line needs to be valid 12ns before the SystemACE clock edge.
# Thus, the timing diagram we want is something like this:
# System ACE clock			___________|-----------|___________|-----------
# Provided 33 MHz clock		-----------|___________|-----------|___________
#											<---> The address and data should become valid 4 ns before the SystemACE clock edge
#										<------> The WE/OE values should become valid 12 ns before the SystemACE clock edge
# 													<---------------> The input data should not be sampled until 22ns after this SystemACE clock edge
#
#The PLL inside ethernetController.v shifts the provided 33 MHz clock 118.929 deg (10.009 ns ==> shifted clock leads SystemACE clock by 5.140ns)
# System ACE clock			___________|-----------|___________|-----------
# Provided 33 MHz clock		-----------|___________|-----------|___________
# Shifted 33 MHz clock		_____|-----------|___________|-----------|_____
#											<---> The address and data should become valid 4 ns before the SystemACE clock edge
#										<------> The WE/OE values should become valid 12 ns before the SystemACE clock edge - taken care of by the output TC
# 													<-------------> The input data should not be sampled until 22ns after this SystemACE clock edge - taken care of by the input TC
#

# EMAC0 RX PHY Clock
NET "GMII_RX_CLK_0" TNM_NET   = "phy_clk_rx0";
TIMEGRP  "Emac0_clk_phy_rx0"        = "phy_clk_rx0";
TIMESPEC "TS_Emac0_clk_phy_rx0"     = PERIOD "Emac0_clk_phy_rx0" 7900 ps HIGH 50 %;

# Set the IDELAY values on the data inputs.
# Please modify to suit your design.
INST "*gmii0?ideldv"  IDELAY_VALUE = 38;
INST "*gmii0?ideld0"  IDELAY_VALUE = 38;
INST "*gmii0?ideld1"  IDELAY_VALUE = 38;
INST "*gmii0?ideld2"  IDELAY_VALUE = 38;
INST "*gmii0?ideld3"  IDELAY_VALUE = 38;
INST "*gmii0?ideld4"  IDELAY_VALUE = 38;
INST "*gmii0?ideld5"  IDELAY_VALUE = 38;
INST "*gmii0?ideld6"  IDELAY_VALUE = 38;
INST "*gmii0?ideld7"  IDELAY_VALUE = 38;
INST "*gmii0?ideler"  IDELAY_VALUE = 38;

# GMII Receiver Constraints:  place flip-flops in IOB
INST "*gmii0?RXD_TO_MAC*"    IOB = true;
INST "*gmii0?RX_DV_TO_MAC"   IOB = true;
INST "*gmii0?RX_ER_TO_MAC"   IOB = true;
INST "*gmii0?GMII_TXD_?"     IOB = true;
INST "*gmii0?GMII_TX_EN"     IOB = true;
INST "*gmii0?GMII_TX_ER"     IOB = true;

##################################
# LocalLink Level constraints
##################################


# EMAC0 LocalLink client FIFO constraints.
INST "*client_side_FIFO_emac0?tx_fifo_i?rd_tran_frame_tog"    TNM = "tx_fifo_rd_to_wr_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?rd_retran_frame_tog"  TNM = "tx_fifo_rd_to_wr_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?rd_addr_txfer*"       TNM = "tx_fifo_rd_to_wr_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?rd_txfer_tog"         TNM = "tx_fifo_rd_to_wr_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_frame_in_fifo"     TNM = "tx_fifo_wr_to_rd_0";

TIMESPEC "TS_tx_fifo_rd_to_wr_0" = FROM "tx_fifo_rd_to_wr_0" TO "clk_125_eth" 8000 ps DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd_0" = FROM "tx_fifo_wr_to_rd_0" TO "clk_125_eth" 8000 ps DATAPATHONLY;

# Reduce clock period to allow 3 ns for metastability settling time
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_tran_frame_tog"    TNM = "tx_metastable_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_rd_addr*"          TNM = "tx_metastable_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_txfer_tog"         TNM = "tx_metastable_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?frame_in_fifo"        TNM = "tx_metastable_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_retran_frame_tog*" TNM = "tx_metastable_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable_0";

TIMESPEC "ts_tx_meta_protect_0" = FROM "tx_metastable_0" 5 ns DATAPATHONLY;

INST "*client_side_FIFO_emac0?tx_fifo_i?rd_addr_txfer*"       TNM = "tx_addr_rd_0";
INST "*client_side_FIFO_emac0?tx_fifo_i?wr_rd_addr*"          TNM = "tx_addr_wr_0";
TIMESPEC "TS_tx_fifo_addr_0" = FROM "tx_addr_rd_0" TO "tx_addr_wr_0" 10ns;

## RX Client FIFO
# Group the clock crossing signals into timing groups
INST "*client_side_FIFO_emac0?rx_fifo_i?wr_store_frame_tog"   TNM = "rx_fifo_wr_to_rd_0";
INST "*client_side_FIFO_emac0?rx_fifo_i?rd_addr_gray*"        TNM = "rx_fifo_rd_to_wr_0";

TIMESPEC "TS_rx_fifo_wr_to_rd_0" = FROM "rx_fifo_wr_to_rd_0" TO "clk_125_eth" 8000 ps DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr_0" = FROM "rx_fifo_rd_to_wr_0" TO "clk_125_eth" 8000 ps DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*client_side_FIFO_emac0?rx_fifo_i?wr_rd_addr_gray_sync*" TNM = "rx_metastable_0";
INST "*client_side_FIFO_emac0?rx_fifo_i?rd_store_frame_tog"    TNM = "rx_metastable_0";

TIMESPEC "ts_rx_meta_protect_0" = FROM "rx_metastable_0" 5 ns;

# Essentially ignore timing on signals that cross between the user clock and ethernet clock domains
# tx_max_output_address is written in the user clock domain but is read back in the ethernet clock domain
# Ignoring the timing is OK since the write is gated by the userRun set of signals
NET "E2M/EC/tx_max_output_address<*>" 					TNM = "tx_max_output";
NET "E2M/EC/tx_curr_bytes_left<*>" 						TNM = "tx_max_output_target";
NET "E2M/EC/tx_header_buffer_len<*>" 					TNM = "tx_max_output_target";
NET "E2M/EC/tx_read_len<*>"								TNM = "tx_max_output_target";
NET "E2M/EC/tx_packet_payload<*>"						TNM = "tx_max_output_target";
TIMESPEC "TS_tx_max_output_1" = FROM "tx_max_output" TO "tx_max_output_target" 8000 ps DATAPATHONLY;
# These are the various userRun signals that need to cross the clock domains
NET "E2M/EC/userRunClearToggle"							TNM = "userRunClearTogUS";
NET "E2M/EC/userRunClearToggleControllerSide<1>"	TNM = "userRunClearTogCS";
TIMESPEC "TS_userRunClearToggle" = FROM "userRunClearTogUS" TO "userRunClearTogCS" 8000 ps DATAPATHONLY;
NET "E2M/EC/userRunRegisterSetToggle"					TNM = "userRunSetTogCS";
NET "E2M/EC/userRunRegisterSetToggleUserSide<1>"	TNM = "userRunSetTogUS";
TIMESPEC "TS_userRunClearToggle" = FROM "userRunSetTogCS" TO "userRunSetTogUS" 8000 ps DATAPATHONLY;
# These are the signals need to do a soft reset that need to cross the clock domains
NET "E2M/EC/softResetToggle"								TNM = "softResetCS";
NET "E2M/EC/softResetToggleUserSide<1>"				TNM = "softResetUS";
TIMESPEC "TS_userRunClearToggle" = FROM "userRunSetTogCS" TO "userRunSetTogUS" 8000 ps DATAPATHONLY;

# The slow hard reset line is not considered synchronous, but we make synchronous internal resets
# The exact timing doens't matter, but I have to put something in if I don't want to use a TIG.
NET "E2M/delayCtrl0Reset*"								TNM = "hard_reset";
TIMESPEC "TS_hard_reset_IG" = FROM "hard_reset" TO FFS 8000 ps DATAPATHONLY;